{"version":3,"file":"index.modern.js","sources":["../index.js"],"sourcesContent":["const KEYCODE = {\n  LEFT:  37,\n  RIGHT: 39,\n}\n\nconst state = new Map()\n\nexport const rovingIndex = ({element:rover, target:selector}) => {\n  // this api allows empty or a query string\n  const target_query = selector || ':scope *'\n  const targets = rover.querySelectorAll(target_query)\n  const startingPoint = targets[0]\n\n  // take container out of the focus flow\n  rover.tabIndex = -1\n  // and all the children\n  targets.forEach(a => a.tabIndex = -1)\n  // except the first target, that accepts focus\n  startingPoint.tabIndex = 0\n\n  // with the roving container as the key\n  // save some state and handy references\n  state.set(rover, {\n    targets,\n    active: startingPoint,\n    index: 0,\n  })\n    \n  // when container or children get focus\n  rover.addEventListener('focusin', _ => {\n    if (state.get('last_rover') == rover) return\n\n    activate(rover, state.get(rover).active)\n    state.set('last_rover', rover)\n  })\n\n  // watch for arrow keys\n  rover.addEventListener('keydown', e => {\n    switch (e.keyCode) {\n      case KEYCODE.RIGHT:\n        e.preventDefault()\n        focusNextItem(rover)\n        break\n      case KEYCODE.LEFT:\n        e.preventDefault()\n        focusPreviousItem(rover)\n        break\n    }\n  })\n}\n\nconst focusNextItem = rover => {\n  const rx = state.get(rover)\n\n  // increment state index\n  rx.index += 1\n\n  // clamp navigation to target bounds\n  if (rx.index > rx.targets.length - 1)\n    rx.index = rx.targets.length - 1\n\n  // use rover index state to find next\n  let next = rx.targets[rx.index]\n\n  // found something, activate it\n  next && activate(rover, next)\n}\n\nconst focusPreviousItem = rover => {\n  const rx = state.get(rover)\n\n  // decrement from the state index\n  rx.index -= 1\n\n  // clamp to 0 and above only\n  if (rx.index < 1)\n    rx.index = 0\n\n  // use rover index state to find next\n  let prev = rx.targets[rx.index]\n\n  // found something, activate it\n  prev && activate(rover, prev)\n}\n\nconst activate = (rover, item) => {\n  const rx = state.get(rover)\n\n  // remove old tab index item\n  rx.active.tabIndex = -1\n\n  // set new active item and focus it\n  rx.active = item\n  rx.active.tabIndex = 0\n  rx.active.focus()\n}"],"names":["state","Map","rovingIndex","element","rover","target","selector","targets","querySelectorAll","startingPoint","tabIndex","forEach","a","set","active","index","addEventListener","_","get","activate","e","keyCode","preventDefault","focusNextItem","focusPreviousItem","rx","length","next","prev","item","focus"],"mappings":"AAAA,MAKMA,EAAQ,IAAIC,IAELC,EAAc,EAAEC,QAAQC,EAAOC,OAAOC,MAEjD,MACMC,EAAUH,EAAMI,iBADDF,GAAY,YAE3BG,EAAgBF,EAAQ,GAG9BH,EAAMM,UAAY,EAElBH,EAAQI,QAAQC,GAAKA,EAAEF,UAAY,GAEnCD,EAAcC,SAAW,EAIzBV,EAAMa,IAAIT,EAAO,CACfG,QAAAA,EACAO,OAAQL,EACRM,MAAO,IAITX,EAAMY,iBAAiB,UAAWC,IAC5BjB,EAAMkB,IAAI,eAAiBd,IAE/Be,EAASf,EAAOJ,EAAMkB,IAAId,GAAOU,QACjCd,EAAMa,IAAI,aAAcT,MAI1BA,EAAMY,iBAAiB,UAAWI,IAChC,OAAQA,EAAEC,SACR,KArCG,GAsCDD,EAAEE,iBACFC,EAAcnB,GACd,MACF,KA1CG,GA2CDgB,EAAEE,iBACFE,EAAkBpB,OAMpBmB,EAAgBnB,IACpB,MAAMqB,EAAKzB,EAAMkB,IAAId,GAGrBqB,EAAGV,OAAS,EAGRU,EAAGV,MAAQU,EAAGlB,QAAQmB,OAAS,IACjCD,EAAGV,MAAQU,EAAGlB,QAAQmB,OAAS,GAGjC,IAAIC,EAAOF,EAAGlB,QAAQkB,EAAGV,OAGzBY,GAAQR,EAASf,EAAOuB,IAGpBH,EAAoBpB,IACxB,MAAMqB,EAAKzB,EAAMkB,IAAId,GAGrBqB,EAAGV,OAAS,EAGRU,EAAGV,MAAQ,IACbU,EAAGV,MAAQ,GAGb,IAAIa,EAAOH,EAAGlB,QAAQkB,EAAGV,OAGzBa,GAAQT,EAASf,EAAOwB,IAGpBT,EAAW,CAACf,EAAOyB,KACvB,MAAMJ,EAAKzB,EAAMkB,IAAId,GAGrBqB,EAAGX,OAAOJ,UAAY,EAGtBe,EAAGX,OAASe,EACZJ,EAAGX,OAAOJ,SAAW,EACrBe,EAAGX,OAAOgB"}