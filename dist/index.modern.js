const e={LEFT:37,UP:38,RIGHT:39,DOWN:40},t=new Map,n=e=>{const{target:n}=e;t.get("last_rover")!=n&&t.has(n)&&(d(n,t.get(n).active),t.set("last_rover",n))},s=t=>{const{target:n}=t;switch(t.keyCode){case e[isRtl?"LEFT":"RIGHT"]:case e.DOWN:t.preventDefault(),o(n);break;case e[isRtl?"RIGHT":"LEFT"]:case e.UP:t.preventDefault(),c(n)}},a=new MutationObserver((e,r)=>{e.forEach(e=>{e.removedNodes.length>0&&e.removedNodes.forEach(e=>{if(t.has(e)){var r;const o=t.get(e);e.removeEventListener("focusin",n),e.removeEventListener("keydown",s),t.delete(e),o.targets.forEach(e=>e.tabIndex=""),0===(null==(r=[...t.keys()])?void 0:r.filter(e=>"last_rover"!==e)).length&&(t.clear(),a.disconnect())}})})}),r=({element:e,target:r})=>{window.getComputedStyle(document.documentElement);const o=e.querySelectorAll(r||":scope *"),c=o[0];e.tabIndex=-1,o.forEach(e=>e.tabIndex=-1),c.tabIndex=0,t.set(e,{targets:o,active:c,index:0}),e.addEventListener("focusin",n),e.addEventListener("keydown",s),a.observe(document,{childList:!0,subtree:!0})},o=e=>{const n=t.get(e);n.index+=1,n.index>n.targets.length-1&&(n.index=n.targets.length-1);let s=n.targets[n.index];s&&d(e,s)},c=e=>{const n=t.get(e);n.index-=1,n.index<1&&(n.index=0);let s=n.targets[n.index];s&&d(e,s)},d=(e,n)=>{const s=t.get(e);s.active.tabIndex=-1,s.active=n,s.active.tabIndex=0,s.active.focus()};export{r as rovingIndex};
//# sourceMappingURL=index.modern.js.map
